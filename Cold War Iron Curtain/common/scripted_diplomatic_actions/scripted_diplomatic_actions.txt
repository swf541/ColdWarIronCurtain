scripted_diplomatic_actions = {

# Influence Nation
	opt_influence_action = {
		allowed = {}
		visible = { NOT = { check_variable = { influenced_by = ROOT } } }
		selectable = {
			custom_trigger_tooltip = {
				tooltip = Influence_action_cooldown
				ROOT = { NOT = { has_country_flag = diplomatic_action_cooldown } }
			}
			NOT = { has_war_with = ROOT }
			custom_trigger_tooltip = {
				tooltip = influence_FPP_1_TT
				check_variable = { ROOT.foreignPowerProjection > 1 }
			}
			custom_trigger_tooltip = {
				tooltip = influence_already_influencing_TT
				ROOT = { NOT = { has_country_flag = flag_influencing } }
			}
			custom_trigger_tooltip = {
				tooltip = influence_already_being_influenced_TT
				NOT = { has_variable = influenced_by }
			}
			custom_trigger_tooltip = {
				tooltip = Influence_Action_1_TT
				OR = {
					OR = {
						check_variable = { influence_array^0 = ROOT }
						check_variable = { influence_array^1 = ROOT }
						check_variable = { influence_array^2 = ROOT }
						check_variable = { influence_array^3 = ROOT }
						check_variable = { influence_array^4 = ROOT }
						check_variable = { influence_array^5 = ROOT }
						check_variable = { influence_array^6 = ROOT }
						check_variable = { influence_array^7 = ROOT }					
					}
					OR = {
						AND = { NOT = { has_variable = influence_array^0 } check_variable = { ROOT.grossdomesticproduct > grossdomesticproduct  } }
						AND = { NOT = { has_variable = influence_array^1 } check_variable = { ROOT.grossdomesticproduct > grossdomesticproduct  } }
						AND = { NOT = { has_variable = influence_array^2 } check_variable = { ROOT.grossdomesticproduct > grossdomesticproduct  } }
						AND = { NOT = { has_variable = influence_array^3 } check_variable = { ROOT.grossdomesticproduct > grossdomesticproduct  } }
						AND = { NOT = { has_variable = influence_array^4 } check_variable = { ROOT.grossdomesticproduct > grossdomesticproduct  } }
						AND = { NOT = { has_variable = influence_array^5 } check_variable = { ROOT.grossdomesticproduct > grossdomesticproduct  } }
						AND = { NOT = { has_variable = influence_array^6 } check_variable = { ROOT.grossdomesticproduct > grossdomesticproduct  } }
						AND = { NOT = { has_variable = influence_array^7 } check_variable = { ROOT.grossdomesticproduct > grossdomesticproduct  } }
					}
				}
			}
		}
		requires_acceptance = no
		cost = 50
		command_power = 0
		show_acceptance_on_action_button = no
		icon = 1
		on_sent_effect = {}
		# runs when the action is properly sent and accepted
		complete_effect = {
			ROOT = { set_country_flag = { flag = diplomatic_action_cooldown value = 1 days = 1 } }
			add_to_variable = { ROOT.foreignPowerProjection = -1 }
			set_temp_variable = { influence_gain = 50 }
			multiply_variable = { influence_gain = decryptTotal }
			for_loop_effect = {
				end = influence_array^num
				value = v
				if = { limit = { check_variable = { influence_array^v = ROOT } }
					add_to_variable = { influence_array_val^v = influence_gain }
					set_country_flag = found
				}
			}
			if = { limit = { NOT = { has_country_flag = found } }
				add_to_array = { influence_array = ROOT.id }
				add_to_array = { influence_array_val = influence_gain }
			}
			clr_country_flag = found
			set_variable = { influenced_by = ROOT }

			ROOT = {
				set_country_flag = flag_influencing
				set_variable = { influence_target = PREV }
				#add_ideas = idea_influencing_daily # to be added if pdx fixes an issue with removing it
				set_variable = { show_start_influencing = 1 }
			}
			recalculate_influence = yes
		}
		reject_effect = {} # runs when the action is properly sent and rejected
		can_be_sent = {} # send button will be disabled if no
		send_description = influence_target_send # if there is no scripted gui, this desc will be used in send yes/no pop up
		reset_receive_effect = {}
		can_be_accepted = { always = no } # accept button will be disabled if no
		receive_description = influence_target_receive # if there is no scripted gui, this desc will be used in send yes/no pop up
		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0
		}
	}

# Stop Influencing
	opt_stop_influence_action = {
		allowed = {}
		visible = {
			ROOT = { has_country_flag = flag_influencing }
			check_variable = { influenced_by = ROOT }
		}
		selectable = {
		}
		requires_acceptance = no
		cost = 0
		command_power = 0
		show_acceptance_on_action_button = no
		icon = 1
		on_sent_effect = {}
		# runs when the action is properly sent and accepted
		complete_effect = {
			ROOT = { set_country_flag = { flag = diplomatic_action_cooldown value = 1 days = 1 } }
			clear_variable = influenced_by
			ROOT = {
				clr_country_flag = flag_influencing
				#remove_ideas = idea_influencing_daily # to be added if pdx fixes an issue with removing it
				set_variable = { show_stop_influencing = 1 }
			}
		}
		reject_effect = {} # runs when the action is properly sent and rejected
		can_be_sent = {} # send button will be disabled if no
		send_description = influence_target_stop # if there is no scripted gui, this desc will be used in send yes/no pop up
		reset_receive_effect = {}
		can_be_accepted = { always = no } # accept button will be disabled if no
		receive_description = influence_target_receive # if there is no scripted gui, this desc will be used in send yes/no pop up
		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0
		}
	}

# Start Military Subsidies
	opt_influence_start_military_subsidies = {
		allowed = {}
		visible = {
			ROOT = {
				NOT = {
					is_in_array = {
						array = military_subsidies
						value = PREV
					}
				}
			}
		}
		selectable = {
			custom_trigger_tooltip = {
				tooltip = Influence_action_cooldown
				ROOT = { NOT = { has_country_flag = diplomatic_action_cooldown } }
			}
			NOT = { has_war_with = ROOT }
			check_variable = { ROOT.foreignPowerProjection > 5 }
			custom_trigger_tooltip = {
				tooltip = Influence_Action_TOP_INFLUENCER_TT
				check_variable = { influence_array^0 = ROOT }
			}
			custom_trigger_tooltip = {
				tooltip = Influence_Action_40_CHECK_TT
				check_variable = { influence_array_calc^0 > 0.40 }
			}
			custom_trigger_tooltip = {
				tooltip = Influence_Action_MIL_SUBSIDY_MONEY_CHECK_TT
				check_variable = { ROOT.SubsidiyCheck > mil_expend_subsidy }
			}
			custom_trigger_tooltip = {	#not twice
				tooltip = Influence_Action_MIL_SUBSIDY_CHECK_TT
				NOT = { has_country_flag = military_subsidized }
				NOT = {
					meta_trigger = {
						text = {
							has_country_flag = [CHECKTAG]_military_subsidizer
						}
						CHECKTAG = "[ROOT.GetTag]"
					}
				}
			}
		}
		requires_acceptance = no
		cost = 50
		command_power = 0
		show_acceptance_on_action_button = no
		icon = 1
		on_sent_effect = {}
		# runs when the action is properly sent and accepted
		complete_effect = {
			ROOT = { set_country_flag = { flag = diplomatic_action_cooldown value = 1 days = 1 } }
			ROOT = { add_to_array = { military_subsidies = PREV.id } }
			set_country_flag = military_subsidized
			meta_effect = {
				text = {
					set_country_flag = [ROOTTAG]_military_subsidizer
				}
				ROOTTAG = "[ROOT.GetTag]"
			}
			set_variable = { mil_subsidy_id = ROOT.id } # used for income generator
			add_to_variable = { ROOT.foreignPowerProjection = -5 }
			set_temp_variable = { influence_gain = 200 } #Make Dynamic Later
			for_loop_effect = {
				end = influence_array^num
				value = v
				if = {
					limit = {
						check_variable = { influence_array^v = ROOT }
					}
					add_to_variable = { influence_array_val^v = influence_gain }
					set_country_flag = found
				}
			}
			if = {
				limit = { NOT = { has_country_flag = found } }
					add_to_array = { influence_array = ROOT.id }
					add_to_array = { influence_array_val = influence_gain }
			}
			recalculate_influence = yes
			# opinions
			add_opinion_modifier = {
				target = ROOT
				modifier = subsidizer
			}
		}
		reject_effect = {} # runs when the action is properly sent and rejected
		can_be_sent = {} # send button will be disabled if no
		send_description = start_subsidy_send # if there is no scripted gui, this desc will be used in send yes/no pop up
		reset_receive_effect = {}
		can_be_accepted = { always = no } # accept button will be disabled if no
		receive_description = start_subsidy_receive # if there is no scripted gui, this desc will be used in send yes/no pop up

		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0
		}
	}

# Stop Military Subsidies
	opt_influence_stop_military_subsidies = {
		allowed = {}
		visible = {
			ROOT = {
				is_in_array = {
					array = military_subsidies
					value = PREV
				}
			}
		}
		selectable = {
			custom_trigger_tooltip = {
				tooltip = Influence_action_cooldown
				ROOT = { NOT = { has_country_flag = diplomatic_action_cooldown } }
			}
			NOT = { has_war_with = ROOT }
			ROOT = {
				is_in_array = {
					array = military_subsidies
					value = PREV
				}
			}
		}
		requires_acceptance = no
		cost = 250
		command_power = 0
		show_acceptance_on_action_button = no
		icon = 1
		on_sent_effect = {}
		# runs when the action is properly sent and accepted
		complete_effect = {
			ROOT = { set_country_flag = { flag = diplomatic_action_cooldown value = 1 days = 1 } }
			ROOT = { remove_from_array = { military_subsidies = PREV } }
			clr_country_flag = military_subsidized
			meta_effect = {
				text = { clr_country_flag = [ROOTTAG]_military_subsidizer }
				ROOTTAG = "[ROOT.GetTag]"
			}
			clear_variable = mil_subsidy_id
			# opinions
			remove_opinion_modifier = {
				target = ROOT
				modifier = subsidizer
			}
		}
		reject_effect = {} # runs when the action is properly sent and rejected
		can_be_sent = {} # send button will be disabled if no
		send_description = stop_subsidy_send # if there is no scripted gui, this desc will be used in send yes/no pop up
		reset_receive_effect = {}
		can_be_accepted = { always = no } # accept button will be disabled if no
		receive_description = stop_subsidy_receive # if there is no scripted gui, this desc will be used in send yes/no pop up
		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0
		}
	}


# Economic Exploitation
	opt_influence_economic_exploition = {
		allowed = {}
		visible = {
			NOT = {
				meta_trigger = {
					text = { has_country_flag = [CHECKTAG]_is_being_exploited }
					CHECKTAG = "[ROOT.GetTag]"
				}
			}
		}
		selectable = {
			custom_trigger_tooltip = {
				tooltip = Influence_action_cooldown
				ROOT = { NOT = { has_country_flag = diplomatic_action_cooldown } }
			}
			NOT = { has_war_with = ROOT }
			custom_trigger_tooltip = {
				tooltip = Influence_Action_FPP_5_TT
				check_variable = { ROOT.foreignPowerProjection > 5 }
			}
			NOT = { is_puppet_of = ROOT }
			custom_trigger_tooltip = {	
				tooltip = Influence_Action_65_INFLUENCE_TT
				check_variable = { influence_array^0 = ROOT }
				check_variable = { influence_array_calc^0 > 0.649 }
			}
		}
		requires_acceptance = no
		cost = 250
		command_power = 0
		show_acceptance_on_action_button = no
		icon = 1
		on_sent_effect = {}
		# runs when the action is properly sent and accepted
		complete_effect = {
			ROOT = { set_country_flag = { flag = diplomatic_action_cooldown value = 1 days = 1 } }
			# remove previous exploiter
			if = { limit = { has_variable = being_exploited_by }
				meta_effect = {
					text = {
						clr_country_flag = { flag = [PREVTAG]_is_being_exploited value = 1 }
						remove_ideas = [PREVTAG]_exploit_idea
					}
					PREVTAG = "[?being_exploited_by.GetTag]"
				}
			}
			# set new exploiter
			set_variable = { being_exploited_by = ROOT }
			meta_effect = {
				text = {
					set_country_flag = { flag = [ROOTTAG]_is_being_exploited value = 1 }
					add_ideas = [ROOTTAG]_exploit_idea
				}
				ROOTTAG = "[ROOT.GetTag]"
			}
			add_to_variable = { ROOT.foreignPowerProjection = -5 }
			set_temp_variable = { influence_reduce = influence_array_val^0 }
			multiply_temp_variable = { influence_reduce = 0.1 }
			for_loop_effect = {
				end = influence_array^num
				value = v
				if = {
					limit = {
						check_variable = { influence_array^v = ROOT }
					}
					subtract_from_variable = { influence_array_val^v = influence_reduce }
				}
			}
			recalculate_influence = yes
			add_stability = -0.10
			# opinions
			add_opinion_modifier = {
				target = ROOT
				modifier = exploiter
			}
			every_neighbor_country = {
				add_opinion_modifier = {
					target = ROOT
					modifier = exploiter_neighbor
				}
			}
		}
		reject_effect = {} # runs when the action is properly sent and rejected
		can_be_sent = {} # send button will be disabled if no
		send_description = economic_exploitation_send # if there is no scripted gui, this desc will be used in send yes/no pop up
		reset_receive_effect = {}
		can_be_accepted = { always = no } # accept button will be disabled if no
		receive_description = economic_exploitation_receive # if there is no scripted gui, this desc will be used in send yes/no pop up
		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0
		}
	}

# Stop Economic Exploitation
	opt_influence_stop_economic_exploition = {
		allowed = {}
		visible = {
			meta_trigger = {
				text = { has_country_flag = [CHECKTAG]_is_being_exploited }
				CHECKTAG = "[ROOT.GetTag]"
			}
		}
		selectable = {
			custom_trigger_tooltip = {
				tooltip = Influence_action_cooldown
				ROOT = { NOT = { has_country_flag = diplomatic_action_cooldown } }
			}
			NOT = { has_war_with = ROOT }
			custom_trigger_tooltip = {
				tooltip = Influence_Action_FPP_5_TT
				check_variable = { ROOT.foreignPowerProjection > 5 }
			}
			NOT = { is_puppet_of = ROOT }
			custom_trigger_tooltip = {	
				tooltip = Influence_Action_65_INFLUENCE_TT
				check_variable = { influence_array^0 = ROOT }
				check_variable = { influence_array_calc^0 > 0.649 }
			}
		}
		requires_acceptance = no
		cost = 100
		command_power = 0
		show_acceptance_on_action_button = no
		icon = 1
		on_sent_effect = {}
		# runs when the action is properly sent and accepted
		complete_effect = {
			ROOT = { set_country_flag = { flag = diplomatic_action_cooldown value = 1 days = 1 } }
			meta_effect = {
				text = {
					clr_country_flag = [ROOTTAG]_is_being_exploited
					remove_ideas = [ROOTTAG]_exploit_idea
				}
				ROOTTAG = "[ROOT.GetTag]"
			}
			clr_country_flag = is_being_exploited
			# opinions
			remove_opinion_modifier = {
				target = ROOT
				modifier = exploiter
			}
			every_neighbor_country = {
				remove_opinion_modifier = {
					target = ROOT
					modifier = exploiter_neighbor
				}
			}
		}
		reject_effect = {} # runs when the action is properly sent and rejected
		can_be_sent = {} # send button will be disabled if no
		send_description = stop_economic_exploitation_send # if there is no scripted gui, this desc will be used in send yes/no pop up
		reset_receive_effect = {}
		can_be_accepted = { always = no } # accept button will be disabled if no
		receive_description = economic_exploitation_receive # if there is no scripted gui, this desc will be used in send yes/no pop up
		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0
		}
	}

# Pay Off Debt
	opt_influence_pay_off_debt = {
		allowed = {}
		visible = {}
		selectable = {
			custom_trigger_tooltip = {
				tooltip = Influence_action_cooldown
				ROOT = { NOT = { has_country_flag = diplomatic_action_cooldown } }
			}
			NOT = { has_war_with = ROOT }
			custom_trigger_tooltip = {
				tooltip = influencer_TT
				is_influencer = yes
			}
			custom_trigger_tooltip = {
				tooltip = influence_Debt_Ratio_TT
				check_variable = { ROOT.currentMoney > currentDebt }
			}
			custom_trigger_tooltip = {
				tooltip = influence_Debt_TT
				check_variable = { currentDebt > 0 }
			}
		}
		requires_acceptance = no
		cost = 0
		command_power = 0
		show_acceptance_on_action_button = no
		icon = 1
		on_sent_effect = {}
		# runs when the action is properly sent and accepted
		complete_effect = {
			ROOT = { set_country_flag = { flag = diplomatic_action_cooldown value = 1 days = 1 } }
			set_temp_variable = { influence_gain = currentDebt } #from global rank idea
			add_to_temp_variable = { influence_gain = 25 } 
			for_loop_effect = {
				end = influence_array^num
				value = v
				if = {
					limit = {
						check_variable = { influence_array^v = ROOT }
					}
					add_to_variable = { influence_array_val^v = influence_gain }
					set_country_flag = found
				}
			}
			if = {
				limit = { NOT = { has_country_flag = found } }
					add_to_array = { influence_array = ROOT.id }
					add_to_array = { influence_array_val = influence_gain }
			}
			set_temp_variable = { tempDebt = currentDebt }
			subtract_from_variable = { ROOT.currentMoney = currentDebt }
			for_each_loop = {
				array = debtPaymentArray
				index = i
				set_variable = { debtTotalsArray^i = 0 } 
				set_variable = { debtPaymentArray^i = 0 } 	
				set_variable = { debtOwnerArray^i = 0 }
			}
			set_variable = { currentDebtPayments = 0 }
			set_variable = { currentDebt = 0 }
			set_variable = { debtPayment = 0 }
			# opinions
			divide_temp_variable = { tempDebt = 10 }
			round_temp_variable = tempDebt
			if = { limit = { check_variable = { tempDebt > 40 } }
				add_opinion_modifier = { target = ROOT modifier = paid_off_debt5 }
			}
			else_if = { limit = { check_variable = { tempDebt > 30 } }
				add_opinion_modifier = { target = ROOT modifier = paid_off_debt4 }
			}
			else_if = { limit = { check_variable = { tempDebt > 20 } }
				add_opinion_modifier = { target = ROOT modifier = paid_off_debt3 }
			}
			else_if = { limit = { check_variable = { tempDebt > 10 } }
				add_opinion_modifier = { target = ROOT modifier = paid_off_debt2 }
			}
			else = {
				add_opinion_modifier = { target = ROOT modifier = paid_off_debt1 }
			}
		}
		reject_effect = {} # runs when the action is properly sent and rejected
		can_be_sent = {} # send button will be disabled if no
		send_description = pay_off_debt_send # if there is no scripted gui, this desc will be used in send yes/no pop up
		reset_receive_effect = {}
		can_be_accepted = { always = no } # accept button will be disabled if no
		receive_description = pay_off_debt_receive # if there is no scripted gui, this desc will be used in send yes/no pop up
		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0
		}
	}

# Economic Aid
	opt_influence_economic_aid = {
		allowed = {}
		visible = {}
		selectable = {
			custom_trigger_tooltip = {
				tooltip = Influence_action_cooldown
				ROOT = { NOT = { has_country_flag = diplomatic_action_cooldown } }
			}
			NOT = { has_war_with = ROOT }
			custom_trigger_tooltip = {
				tooltip = influencer_TT
				is_influencer = yes
			}
			custom_trigger_tooltip = {
				tooltip = influence_FPP_1_TT			
				check_variable = { ROOT.foreignPowerProjection > 1 }
			}
			NOT = { has_idea = foreign_economic_growth }
		}
		requires_acceptance = no
		cost = 100
		command_power = 0
		show_acceptance_on_action_button = no
		icon = 1
		on_sent_effect = {}
		# runs when the action is properly sent and accepted
		complete_effect = {
			ROOT = { set_country_flag = { flag = diplomatic_action_cooldown value = 1 days = 1 } }
			add_to_variable = { ROOT.foreignPowerProjection = -1 }
			add_timed_idea = {
				idea = foreign_economic_growth
				days = 365
			}
			# give influence (same as 1 day of Influencing)
			set_temp_variable = { influence_gain = 50 }
			for_loop_effect = {
				end = influence_array^num
				value = v
				if = {
					limit = { check_variable = { influence_array^v = ROOT } }
					add_to_variable = { influence_array_val^v = influence_gain }
					set_country_flag = found
				}
			}
			if = {
				limit = { NOT = { has_country_flag = found } }
				add_to_array = { influence_array = ROOT.id }
				add_to_array = { influence_array_val = influence_gain }
			}
			clr_country_flag = found
			recalculate_influence = yes
			# opinions
			add_opinion_modifier = {
				target = ROOT
				modifier = gave_economic_aid
			}
		}
		reject_effect = {} # runs when the action is properly sent and rejected
		can_be_sent = {} # send button will be disabled if no
		send_description = economic_aid_send # if there is no scripted gui, this desc will be used in send yes/no pop up
		reset_receive_effect = {}
		can_be_accepted = { always = no } # accept button will be disabled if no
		receive_description = economic_aid_receive # if there is no scripted gui, this desc will be used in send yes/no pop up

		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0
		}
	}


# Establish Dependent State
	opt_influence_puppet_action = {
		allowed = {}
		visible = { 
			has_game_rule = { 
				rule = allow_dependent_state 
				option = FREE
			}
		}
		selectable = {
			custom_trigger_tooltip = {
				tooltip = Influence_action_cooldown
				ROOT = { NOT = { has_country_flag = diplomatic_action_cooldown } }
			}
			NOT = { has_war_with = ROOT }
			is_subject = no
			has_war = no
			custom_trigger_tooltip = {
				tooltip = Influence_Action_PUPPET_TT_2
				check_variable = { influence_array^0 = ROOT }
				check_variable = { influence_array_calc^0 > 0.9 }
			}
			custom_trigger_tooltip = {
				tooltip = Influence_Action_PUPPET_TT 
				check_variable = { ROOT.foreignPowerProjection > 9 }
			}
			custom_trigger_tooltip = {
				tooltip = Influence_Action_PUPPET_TT_3
				check_variable = { ROOT.grossdomesticproduct > grossdomesticproduct_influence_limit }
			}
		}
		requires_acceptance = no
		cost = 500
		command_power = 0
		show_acceptance_on_action_button = no
		icon = 1
		on_sent_effect = {}
		# runs when the action is properly sent and accepted
		complete_effect = {
			ROOT = { set_country_flag = { flag = diplomatic_action_cooldown value = 1 days = 1 } }
			add_to_variable = { ROOT.foreignPowerProjection = -10 }
			for_loop_effect = {
				end = influence_array^num
				value = v
				meta_effect = {
					text = { remove_ideas = [THISTAG]_exploit_idea }
					THISTAG = "[?var:influence_array^v.GetTag]"
				}
			}
			set_country_flag = influence_puppet
			add_stability = -0.25
			ROOT = {
				set_autonomy = {
					target = PREV
					autonomy_state = autonomy_puppet
					freedom_level = 0.5
				}
				add_named_threat = { threat = 2 name = created_puppet_loc }
			}
			# opinions
			add_opinion_modifier = {
				target = ROOT
				modifier = puppeted_us
			}
			every_neighbor_country = {
				add_opinion_modifier = {
					target = ROOT
					modifier = puppeted_neighbor
				}
			}	
		}		
		reject_effect = {} # runs when the action is properly sent and rejected
		can_be_sent = {} # send button will be disabled if no
		send_description = puppet_influence_send # if there is no scripted gui, this desc will be used in send yes/no pop up
		reset_receive_effect = {}
		can_be_accepted = { always = no } # accept button will be disabled if no
		receive_description = puppet_influence_receive # if there is no scripted gui, this desc will be used in send yes/no pop up
		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0
		}
	}

# Manipulate Politics
	opt_influence_manipulate_politics_action = {
		allowed = {}
		visible = {}
		selectable = {
			custom_trigger_tooltip = {
				tooltip = Influence_action_cooldown
				ROOT = { NOT = { has_country_flag = diplomatic_action_cooldown } }
			}
			NOT = { has_war_with = ROOT }
			NOT = { is_puppet_of = ROOT }
			custom_trigger_tooltip = {
				tooltip = influence_FPP_2_TT
				check_variable = { ROOT.foreignPowerProjection > 2 }
			}
			custom_trigger_tooltip = {
				tooltip = influence_MAJORITY_TT
				check_variable = { influence_array^0 = ROOT }
				check_variable = { influence_array_calc^0 > 0.50 }
			}
		}
		requires_acceptance = no
		cost = 100
		command_power = 0
		show_acceptance_on_action_button = no
		icon = 1
		on_sent_effect = {}
		# runs when the action is properly sent and accepted
		complete_effect = {
			ROOT = { set_country_flag = { flag = diplomatic_action_cooldown value = 1 days = 1 } }
			add_to_variable = { ROOT.foreignPowerProjection = -2 }
			if = { limit = { ROOT = { has_government = conservative } } add_popularity = { ideology = conservative popularity = 0.02 } }
			if = { limit = { ROOT = { has_government = Liberal_Conservatism } } add_popularity = { ideology = Liberal_Conservatism popularity = 0.02 } }
			if = { limit = { ROOT = { has_government = Christian_Democratic } } add_popularity = { ideology = Christian_Democratic popularity = 0.02 } }
			if = { limit = { ROOT = { has_government = socialist } } add_popularity = { ideology = socialist popularity = 0.02 } }
			if = { limit = { ROOT = { has_government = Social_Democratic } } add_popularity = { ideology = Social_Democratic popularity = 0.02 } }
			if = { limit = { ROOT = { has_government = Social_Liberalism } } add_popularity = { ideology = Social_Liberalism popularity = 0.02 } }
			if = { limit = { ROOT = { has_government = democratic } } add_popularity = { ideology = democratic popularity = 0.02 } }
			if = { limit = { ROOT = { has_government = centrist } } add_popularity = { ideology = centrist popularity = 0.02 } }
			if = { limit = { ROOT = { has_government = liberal } } add_popularity = { ideology = liberal popularity = 0.02 } }
			if = { limit = { ROOT = { has_government = communism } } add_popularity = { ideology = communism popularity = 0.02 } }
			if = { limit = { ROOT = { has_government = trotskyism } } add_popularity = { ideology = trotskyism popularity = 0.02 } }
			if = { limit = { ROOT = { has_government = maoism } } add_popularity = { ideology = maoism popularity = 0.02 } }
			if = { limit = { ROOT = { has_government = fascism } } add_popularity = { ideology = fascism popularity = 0.02 } }
			if = { limit = { ROOT = { has_government = nationalist } } add_popularity = { ideology = nationalist popularity = 0.02 } }
			if = { limit = { ROOT = { has_government = monarchism } }add_popularity = { ideology = monarchism popularity = 0.02 } }
			if = { limit = { ROOT = { has_government = neutrality } } add_popularity = { ideology = neutrality popularity = 0.02 } }
			if = { limit = { ROOT = { has_government = islamism } } add_popularity = { ideology = islamism popularity = 0.02 } }
			if = { limit = { ROOT = { has_government = radical_shiaism } } add_popularity = { ideology = radical_shiaism popularity = 0.02 } }
			if = { limit = { ROOT = { has_government = Salafism } } add_popularity = { ideology = Salafism popularity = 0.02 } }
			# opinions
			add_opinion_modifier = {
				target = ROOT
				modifier = manipulated_politics
			}
		}
		reject_effect = {} # runs when the action is properly sent and rejected
		can_be_sent = {} # send button will be disabled if no
		send_description = manipulate_politics_send # if there is no scripted gui, this desc will be used in send yes/no pop up
		reset_receive_effect = {}
		can_be_accepted = { always = no } # accept button will be disabled if no
		receive_description = manipulate_politics_receive # if there is no scripted gui, this desc will be used in send yes/no pop up
		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0
		}
	}


# Start Trade Steering
	opt_influence_trade_agreement_action = {
		allowed = {}
		visible = {
			meta_trigger = {
				text = {
					NOT = { has_country_flag = trade_treaty1_with_[ROOTTAG] }
					ROOT = { NOT = { has_country_flag = trade_treaty1_with_[THISTAG] } }
				}
				ROOTTAG = "[ROOT.GetTag]"
				THISTAG = "[THIS.GetTag]"
			}
		}
		send_description = trade_agreement_yes_send
		selectable = {
			custom_trigger_tooltip = {
				tooltip = Influence_action_cooldown
				ROOT = { NOT = { has_country_flag = diplomatic_action_cooldown } }
			}
			NOT = { has_war_with = ROOT }
			custom_trigger_tooltip = {
				tooltip = influence_MAJORITY_TT
				any_of = {
					array = influence_array
					check_variable = { influence_array^i = ROOT }
					check_variable = { influence_array_calc^i > 0.50 }
				}
			}
			custom_trigger_tooltip = {
				tooltip = influence_FPP_3
				check_variable = { ROOT.foreignPowerProjection > 3 }
			}
			NOT = { is_puppet_of = ROOT }
			custom_trigger_tooltip = {
				tooltip = influence_TRADE_AGREEMENT_TT
				meta_trigger = {
					text = {
						NOT = { has_country_flag = trade_treaty2_with_[ROOTTAG] }
						ROOT = { NOT = { has_country_flag = trade_treaty2_with_[THISTAG] } }
					}
					ROOTTAG = "[ROOT.GetTag]"
					THISTAG = "[THIS.GetTag]"
				}
			}
		}
		requires_acceptance = no
		cost = 100
		command_power = 0
		show_acceptance_on_action_button = no
		icon = 1
		on_sent_effect = {}
		# runs when the action is properly sent and accepted
		complete_effect = {
			ROOT = { set_country_flag = { flag = diplomatic_action_cooldown value = 1 days = 1 } }
			add_to_variable = { ROOT.foreignPowerProjection -3 }
			meta_effect = {
				text = {
					add_ideas = trade_treaty_[ROOTTAG]
					set_country_flag = trade_treaty1_with_[ROOTTAG]
					ROOT = { add_ideas = trade_treaty_[THISTAG] }
					ROOT = { set_country_flag = trade_treaty1_with_[THISTAG] }
				}
				ROOTTAG = "[ROOT.GetTag]"
				THISTAG = "[THIS.GetTag]"
			}
			# opinions
			add_opinion_modifier = {
				target = ROOT
				modifier = has_trade_agreement
			}
			ROOT = {
				add_opinion_modifier = {
					target = FROM
					modifier = has_trade_agreement
				}
			}
		}
		reject_effect = {} # runs when the action is properly sent and rejected
		can_be_sent = {} # send button will be disabled if no
		send_description = trade_agreement_send # if there is no scripted gui, this desc will be used in send yes/no pop up
		reset_receive_effect = {}
		can_be_accepted = { always = no } # accept button will be disabled if no
		receive_description = trade_agreement_receive # if there is no scripted gui, this desc will be used in send yes/no pop up
		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0
		}
	}

# Stop Trade Steering
	opt_influence_stop_trade_agreement_action = {
		allowed = {}
		visible = {
			meta_trigger = {
				text = {
					has_country_flag = trade_treaty1_with_[ROOTTAG]
					ROOT = { has_country_flag = trade_treaty1_with_[THISTAG] }
				}
				ROOTTAG = "[ROOT.GetTag]"
				THISTAG = "[THIS.GetTag]"
			}
		}
		selectable = {
			custom_trigger_tooltip = {
				tooltip = Influence_action_cooldown
				ROOT = { NOT = { has_country_flag = diplomatic_action_cooldown } }
			}
			NOT = { has_war_with = ROOT }
			custom_trigger_tooltip = {
				tooltip = influence_FPP_3
				check_variable = { ROOT.foreignPowerProjection > 3 }
			}
			NOT = { is_puppet_of = ROOT }
		}
		requires_acceptance = no
		cost = 100
		command_power = 0
		show_acceptance_on_action_button = no
		icon = 1
		on_sent_effect = {}
		# runs when the action is properly sent and accepted
		complete_effect = {
			ROOT = { set_country_flag = { flag = diplomatic_action_cooldown value = 1 days = 1 } }
			meta_effect = {
				text = {
					remove_ideas = trade_treaty_[ROOTTAG]
					clr_country_flag = trade_treaty1_with_[ROOTTAG]
					ROOT = { remove_ideas = trade_treaty_[THISTAG] }
					ROOT = { clr_country_flag = trade_treaty1_with_[THISTAG] }
				}
				ROOTTAG = "[ROOT.GetTag]"
				THISTAG = "[THIS.GetTag]"
			}
			# opinions
			remove_opinion_modifier = {
				target = ROOT
				modifier = has_trade_agreement
			}
			ROOT = {
				remove_opinion_modifier = {
					target = FROM
					modifier = has_trade_agreement
				}
			}
		}
		reject_effect = {} # runs when the action is properly sent and rejected
		can_be_sent = {} # send button will be disabled if no
		send_description = trade_agreement_send # if there is no scripted gui, this desc will be used in send yes/no pop up
		reset_receive_effect = {}
		can_be_accepted = { always = no } # accept button will be disabled if no
		receive_description = trade_agreement_receive # if there is no scripted gui, this desc will be used in send yes/no pop up

		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0
		}
	}

# Start Trade Agreement
	opt_influence_trade_agreement_yes_action = {
		allowed = {}
		visible = {
			meta_trigger = {
				text = {
					NOT = { has_country_flag = trade_treaty2_with_[ROOTTAG] }
					ROOT = { NOT = { has_country_flag = trade_treaty2_with_[THISTAG] } }
				}
				ROOTTAG = "[ROOT.GetTag]"
				THISTAG = "[THIS.GetTag]"
			}
		}
		selectable = {
			custom_trigger_tooltip = {
				tooltip = Influence_action_cooldown
				ROOT = { NOT = { has_country_flag = diplomatic_action_cooldown } }
			}
			NOT = { has_war_with = ROOT }
			custom_trigger_tooltip = {
				tooltip = influence_LOW_TT
				any_of = {
					array = influence_array
					check_variable = { influence_array^i = ROOT }
					check_variable = { influence_array_calc^i > 0.01 }
				}
			}
			NOT = { is_puppet_of = ROOT }
			custom_trigger_tooltip = {
				tooltip = influence_TRADE_AGREEMENT_TT
				meta_trigger = {
					text = {
						NOT = { has_country_flag = trade_treaty1_with_[ROOTTAG] }
						ROOT = { NOT = { has_country_flag = trade_treaty1_with_[THISTAG] } }
					}
					ROOTTAG = "[ROOT.GetTag]"
					THISTAG = "[THIS.GetTag]"
				}
			}
		}
		requires_acceptance = yes
		cost = 100
		command_power = 0
		show_acceptance_on_action_button = yes
		icon = 1
		on_sent_effect = {}
		# runs when the action is properly sent and accepted
		complete_effect = {
			ROOT = { set_country_flag = { flag = diplomatic_action_cooldown value = 1 days = 1 } }
			meta_effect = {
				text = {
					add_ideas = trade_treaty_[ROOTTAG]
					set_country_flag = trade_treaty2_with_[ROOTTAG]
					ROOT = { add_ideas = trade_treaty_[THISTAG] }
					ROOT = { set_country_flag = trade_treaty2_with_[THISTAG] }
				}
				ROOTTAG = "[ROOT.GetTag]"
				THISTAG = "[THIS.GetTag]"
			}
			# opinions
			add_opinion_modifier = {
				target = ROOT
				modifier = has_trade_agreement
			}
			ROOT = {
				add_opinion_modifier = {
					target = FROM
					modifier = has_trade_agreement
				}
			}
		}
		reject_effect = {} # runs when the action is properly sent and rejected
		can_be_sent = {} # send button will be disabled if no
		send_description = trade_agreement_send # if there is no scripted gui, this desc will be used in send yes/no pop up
		reset_receive_effect = {}
		can_be_accepted = { always = yes } # accept button will be disabled if no
		receive_description = trade_agreement_receive # if there is no scripted gui, this desc will be used in send yes/no pop up

		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0
		}
	}

# Stop Trade Agreement
	opt_influence_stop_trade_agreement_yes_action = {
		allowed = {}
		visible = {
			meta_trigger = {
				text = {
					has_country_flag = trade_treaty2_with_[ROOTTAG]
					ROOT = { has_country_flag = trade_treaty2_with_[THISTAG] }
				}
				ROOTTAG = "[ROOT.GetTag]"
				THISTAG = "[THIS.GetTag]"
			}
		}
		selectable = {
			custom_trigger_tooltip = {
				tooltip = Influence_action_cooldown
				ROOT = { NOT = { has_country_flag = diplomatic_action_cooldown } }
			}
			NOT = { has_war_with = ROOT }
			NOT = { is_puppet_of = ROOT }
		}
		requires_acceptance = yes
		cost = 100
		command_power = 0
		show_acceptance_on_action_button = yes
		icon = 1
		on_sent_effect = {}
		# runs when the action is properly sent and accepted
		complete_effect = {
			ROOT = { set_country_flag = { flag = diplomatic_action_cooldown value = 1 days = 1 } }
			meta_effect = {
				text = {
					remove_ideas = trade_treaty_[ROOTTAG]
					clr_country_flag = trade_treaty2_with_[ROOTTAG]
					ROOT = { remove_ideas = trade_treaty_[THISTAG] }
					ROOT = { clr_country_flag = trade_treaty2_with_[THISTAG] }
				}
				ROOTTAG = "[ROOT.GetTag]"
				THISTAG = "[THIS.GetTag]"
			}
			# opinions
			remove_opinion_modifier = {
				target = ROOT
				modifier = has_trade_agreement
			}
			ROOT = {
				remove_opinion_modifier = {
					target = FROM
					modifier = has_trade_agreement
				}
			}
		}
		reject_effect = {} # runs when the action is properly sent and rejected
		can_be_sent = {} # send button will be disabled if no
		send_description = trade_agreement_send # if there is no scripted gui, this desc will be used in send yes/no pop up
		reset_receive_effect = {}
		can_be_accepted = { always = yes } # accept button will be disabled if no
		receive_description = trade_agreement_receive # if there is no scripted gui, this desc will be used in send yes/no pop up
		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0
		}
	}


# Mutual Defense Agreement
	opt_influence_mutual_defense_agreement = {
		allowed = {}
		visible = {
			NOT = {
				meta_trigger = {
					text = { has_country_flag = [CHECKTAG]_mutual_defense_agreement }
					CHECKTAG = "[ROOT.GetTag]"
				}
			}
		}
		selectable = {
			custom_trigger_tooltip = {
				tooltip = Influence_action_cooldown
				ROOT = { NOT = { has_country_flag = diplomatic_action_cooldown } }
			}
			NOT = { has_war_with = ROOT }
			custom_trigger_tooltip = {
				tooltip = influence_MAJORITY_TT
				check_variable = { influence_array^0 = ROOT }
				check_variable = { influence_array_calc^0 > 0.50 }
			}
			custom_trigger_tooltip = {
				tooltip = influence_FPP_5_TT
				check_variable = { ROOT.foreignPowerProjection > 4 }
			}
		}
		requires_acceptance = no
		cost = 200
		command_power = 0
		show_acceptance_on_action_button = no
		icon = 1
		on_sent_effect = {}
		# runs when the action is properly sent and accepted
		complete_effect = {
			ROOT = { set_country_flag = { flag = diplomatic_action_cooldown value = 1 days = 1 } }
			meta_effect = {
				text = { set_country_flag = [ROOTTAG]_mutual_defense_agreement }
				ROOTTAG = "[ROOT.GetTag]"
			}
			ROOT = {
				meta_effect = {
					text = { set_country_flag = [TARGETTAG]_mutual_defense_agreement }
					TARGETTAG = "[PREV.GetTag]"
				}
			}
			ROOT = {
				give_guarantee = PREV
				diplomatic_relation = {
					country = PREV
					relation = military_access
					active = yes
				}
				diplomatic_relation = {
					country = PREV
					relation = docking_rights
					active = yes
				}
			}
			give_guarantee = ROOT
			diplomatic_relation = {
				country = ROOT
				relation = military_access
				active = yes
			}
			diplomatic_relation = {
				country = ROOT
				relation = docking_rights
				active = yes
			}
			add_to_variable = { ROOT.foreignPowerProjection = -5 }
			# give influence (same as 1 day of Influencing)
			set_temp_variable = { influence_gain = 50 }
			for_loop_effect = {
				end = influence_array^num
				value = v
				if = { limit = { check_variable = { influence_array^v = ROOT } }
					add_to_variable = { influence_array_val^v = influence_gain }
					set_country_flag = found
				}
			}
			if = { limit = { NOT = { has_country_flag = found } }
				add_to_array = { influence_array = ROOT.id }
				add_to_array = { influence_array_val = influence_gain }
			}
			clr_country_flag = found
			recalculate_influence = yes
			# opinions
			add_opinion_modifier = {
				target = ROOT
				modifier = has_mdt
			}
			ROOT = {
				add_opinion_modifier = {
					target = FROM
					modifier = has_mdt
				}
			}
		}
		reject_effect = {} # runs when the action is properly sent and rejected
		can_be_sent = {} # send button will be disabled if no
		send_description = mutual_defense_treaty_send # if there is no scripted gui, this desc will be used in send yes/no pop up
		reset_receive_effect = {}
		can_be_accepted = { always = no } # accept button will be disabled if no
		receive_description = mutual_defense_treaty_receive # if there is no scripted gui, this desc will be used in send yes/no pop up
		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0
		}
	}

# Break Mutual Defense Agreement
	opt_influence_break_mutual_defense_agreement = {
		allowed = {}
		visible = {
			meta_trigger = {
				text = { has_country_flag = [CHECKTAG]_mutual_defense_agreement }
				CHECKTAG = "[ROOT.GetTag]"
			}
		}
		selectable = {
			custom_trigger_tooltip = {
				tooltip = Influence_action_cooldown
				ROOT = { NOT = { has_country_flag = diplomatic_action_cooldown } }
			}
			NOT = { has_war_with = ROOT }
			custom_trigger_tooltip = {
				tooltip = influencer_TT
				is_influencer = yes
			}
			custom_trigger_tooltip = {
				tooltip = influence_FPP_5_TT
				check_variable = { ROOT.foreignPowerProjection > 4 }
			}			
		}
		requires_acceptance = no
		cost = 200
		command_power = 0
		show_acceptance_on_action_button = no
		icon = 1
		on_sent_effect = {}
		# runs when the action is properly sent and accepted
		complete_effect = {
			ROOT = { set_country_flag = { flag = diplomatic_action_cooldown value = 1 days = 1 } }
			meta_effect = {
				text = { clr_country_flag = [ROOTTAG]_mutual_defense_agreement }
				ROOTTAG = "[ROOT.GetTag]"
			}
			ROOT = {
				meta_effect = {
					text = { clr_country_flag = [TARGETTAG]_mutual_defense_agreement }
					TARGETTAG = "[PREV.GetTag]"
				}
			}
			ROOT = {
				diplomatic_relation = {
					country = PREV
					relation = guarantee
					active = no
				}
				diplomatic_relation = {
					country = PREV
					relation = military_access
					active = no
				}
				diplomatic_relation = {
					country = PREV
					relation = docking_rights
					active = no
				}
			}
			diplomatic_relation = {
				country = ROOT
				relation = guarantee
				active = no
			}
			diplomatic_relation = {
				country = ROOT
				relation = military_access
				active = no
			}
			diplomatic_relation = {
				country = ROOT
				relation = docking_rights
				active = no
			}
			recalculate_influence = yes
			# opinions
			remove_opinion_modifier = {
				target = ROOT
				modifier = has_mdt
			}
			ROOT = {
				remove_opinion_modifier = {
					target = FROM
					modifier = has_mdt
				}
			}
		}
		reject_effect = {} # runs when the action is properly sent and rejected
		# SEND POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# send_scripted_gui = send_scripted_gui_name # if specified, the diplomatic action will use this scripted gui before sending the request. the player (or ai) can make changes on that gui and store stuff as variable to customize action
		can_be_sent = {} # send button will be disabled if no
		send_description = break_mutual_defense_treaty_send # if there is no scripted gui, this desc will be used in send yes/no pop up
		# RECEIVE POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# receive_scripted_gui = receive_scripted_gui_name #if specified the receiver of the action will get this scripted gui instead of yes-no popup when they receive the propose
		reset_receive_effect = {}
		can_be_accepted = { always = no } # accept button will be disabled if no
		receive_description = mutual_defense_treaty_receive # if there is no scripted gui, this desc will be used in send yes/no pop up
		# PLAYER FEEDBACK ON ACCEPT/REJECT
		#can be overridden to customize accepted/rejected pop ups for the sender
		# AI
		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0
		}
	}
}
